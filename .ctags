--regex-ruby=/^[[:space:]]*(has_(one|many)|has_and_belongs_to_many|belongs_to)[[:space:]]+:([a-z0-9_]+)/\3/
--regex-ruby=/^[[:space:]]*attr_(reader|writer|accessor|scope)[[:space:]]+:([a-z0-9_?]+)/\2/
--regex-ruby=/^[[:space:]]*([_A-Z][_A-Z0-9]*)[[:space:]]*=([[:space:]]|[^<>=])/\1/
--regex-ruby=/^[[:space:]]*class[[:space:]]+([_A-Z][_A-Z0-9]*)[[:space:]]*([<;].*)$/\1/

--fields=+l
--verbose=no
--tag-relative=yes

--langdef=scala
--langmap=scala:.scala
--regex-scala=/^.*class[[:space:]]+([a-zA-Z0-9_:<>]+)/\1/c,classes/
--regex-scala=/^.*case[[:space:]]+class[[:space:]]+([a-zA-Z0-9_]+)/\1/r,cclasses/
--regex-scala=/^.*object[[:space:]]+([a-zA-Z0-9_]+)/\1/o,objects/
--regex-scala=/^.*case[[:space:]]+object[[:space:]]+([a-zA-Z0-9_]+)/\1/o,cobjects/
--regex-scala=/^.*trait[[:space:]]+([a-zA-Z0-9_]+)/\1/t,traits/
--regex-scala=/^.*[[:space:]]+def[[:space:]]+([a-zA-Z0-9_=]+)[[:space:]]*.*[:=\(\{]/\1/m,methods/
--regex-scala=/^.*[[:space:]]+val[[:space:]]+([a-zA-Z0-9_=]+)[[:space:]]*.*[:=]/\1/m,methods/
--regex-scala=/^.*[[:space:]]+type[[:space:]]+([a-zA-Z0-9_]+)[[:space:]]*[\[<>=]/\1/T,types/

--langdef=markdown-scala-nyandoc
--regex-markdown-scala-nyandoc=/^#+ .*(def|val|var|type)[[:space:]]+([^ (\[]+)/\2/

--langdef=markdown-java-nyandoc
--regex-markdown-java-nyandoc=/^#+ .*[[:space:]]([a-zA-Z0-9]+(<.+>)?)\(/\1/

--exclude=/THISS_IS_JUST_A_COMMENT:from_yats.vim
--langdef=typescript
--langmap=typescript:.ts
--regex-typescript=/^[ \t]*(export)?[ \t]*class[ \t]+([a-zA-Z0-9_]+)/\2/c,classes/
--regex-typescript=/^[ \t]*(export)?[ \t]*abstract class[ \t]+([a-zA-Z0-9_]+)/\2/a,abstract classes/
--regex-typescript=/^[ \t]*(export)?[ \t]*module[ \t]+([a-zA-Z0-9_]+)/\2/n,modules/
--regex-typescript=/^[ \t]*(export)?[ \t]*type[ \t]+([a-zA-Z0-9_]+)/\2/t,types/
--regex-typescript=/^[ \t]*(export)?[ \t]*namespace[ \t]+([a-zA-Z0-9_]+)/\2/n,modules/
--regex-typescript=/^[ \t]*(export)?[ \t]*function[ \t]+([a-zA-Z0-9_]+)/\2/f,functions/
--regex-typescript=/^[ \t]*export[ \t]+(var|const|let)[ \t]+([a-zA-Z0-9_]+)/\1/v,variables/
--regex-typescript=/^[ \t]*var[ \t]+([a-zA-Z0-9_]+)[ \t]*=[ \t]*function[ \t]*\(\)/\1/l,varlambdas/
--regex-typescript=/^[ \t]*(export)?[ \t]*(public|private)[ \t]+(static|readonly)?[ \t]*([a-zA-Z0-9_]+)/\4/m,members/
--regex-typescript=/^[ \t]*(export)?[ \t]*interface[ \t]+([a-zA-Z0-9_]+)/\2/i,interfaces/
--regex-typescript=/^[ \t]*(export)?[ \t]*enum[ \t]+([a-zA-Z0-9_]+)/\2/e,enums/

--exclude=/THISS_IS_JUST_A_COMMENT:'original=https://github.com/nikomatsakis/rust-etags'
--langdef=Rust
--langmap=Rust:.rs
--regex-Rust=/fn +([a-zA-Z0-9_]+) *[(<{]/\1/f,functions,function definitions/
--regex-Rust=/(type|enum|struct|trait)[ \t]+([a-zA-Z0-9_]+) *[=<{(;]?/\2/T,types,type definitions/
--regex-Rust=/mod[ \t]+([a-zA-Z0-9_]+) *[<{(;]/\1/M,modules,module definitions/
--regex-Rust=/(static|const) +([a-zA-Z0-9_]+) *[:=]/\2/c,consts,static constants/
--regex-Rust=/macro_rules! +([a-zA-Z0-9_]+) *{/\1/d,macros,macro definitions/
--regex-Rust=/^[ \t]*impl([ \t\n]*<[^>]*>)?[ \t]+(([a-zA-Z0-9_:]+)[ \t]*(<[^>]*>)?[ \t]+(for)[ \t]+)?([a-zA-Z0-9_]+)/\2 \6/i,impls,trait implementations/

--exclude=target
--exclude=.git
